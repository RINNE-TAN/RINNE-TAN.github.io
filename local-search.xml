<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>函数式的数据库操作</title>
    <link href="/2021/04/02/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/04/02/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>backend</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些git的常用操作</title>
    <link href="/2021/04/02/%E4%B8%80%E4%BA%9Bgit%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/04/02/%E4%B8%80%E4%BA%9Bgit%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一些git的常用操作"><a href="#一些git的常用操作" class="headerlink" title="一些git的常用操作"></a>一些git的常用操作</h1><p>当遇到要基于某个分支开发的时候可以使用以下命令</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git checkout mybranchgit reset --hard  master#将mybranch重置为master分支git push -f#将目前分支强制推送至远程(无视冲突)</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang复习</title>
    <link href="/2021/03/20/golang%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/03/20/golang%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Golang复习"><a href="#Golang复习" class="headerlink" title="Golang复习"></a>Golang复习</h1><p>在之前草率得学了一遍go后发现基础极其不扎实,后来通过go tour和go语言圣经重新复习了一遍,下面记录一些琐碎的知识点</p><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go">import (&quot;github.com&#x2F;xxxxxx&quot;    _&quot;github.com&#x2F;yyyyy&quot;    ginSwagger &quot;github.com&#x2F;swaggo&#x2F;gin-swagger&quot;)&#x2F;&#x2F;其中第一行是正常的引入包&#x2F;&#x2F;第二行是执行包里面的init()函数进行初始化但是不使用包内变量,结构体,函数等等.&#x2F;&#x2F;第三行是导入包的时候并对包重命名</code></pre></div><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>go进行赋值操作的时候都是值传递,他们都是在内存中有独立空间的，也就是copy的过程(通过rust了解了一部分内容)，y:=x后对y修改不会影响x的值</p><p>但是遇到需要共享内存的情况,就需要引用类型</p><p>slice、map、channel因为都指向了底层数组,因此创建的时候都可以通过make创建</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go">func make(t Type, size ...IntegerType) Type&#x2F;&#x2F;make的函数声明c:&#x3D;make(chan int,3)&#x2F;&#x2F;有缓冲通道,不加数字则无缓冲s:&#x3D;make([]int,3,10)&#x2F;&#x2F;容量为10,长度为3的切片m:&#x3D;make(map[string]int,10)&#x2F;&#x2F;创建容量为10的映射&#x2F;&#x2F;第一个参数是数据类型&#x2F;&#x2F;同时应该理解用var声明并赋值的时候应该怎么写var s &#x3D;[]int&#123;1,2,3&#125;m:&#x3D;map[string]int&#123;&quot;hello&quot;:1,&quot;world&quot;:2,&#125;</code></pre></div><h2 id="底层数据结构的概念"><a href="#底层数据结构的概念" class="headerlink" title="底层数据结构的概念"></a>底层数据结构的概念</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>占用一片连续的内存空间,在使用的过程中CPU可以将其缓存得更久,因为每个元素类型相同又是连续分配,每次访问每次移动都是相同距离,故效率很高.</p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go">type slice struct &#123;array unsafe.Pointerlen   intcap   int&#125;&#x2F;&#x2F;切片的底层封装</code></pre></div><p>底层封装了一个指向底层数组的指针,切片的长度,容量,并通过这些参数进行切片操作.</p><ul><li>切片在进行截取操作的时候会共享同一个底层数组.</li><li>切片的类型和长度无关(见定义),数组的类型和长度有关.</li><li>由于slice封装了底层数组的指针,故slice和slice的指针均可以访问到底层数组并且修改数据,但是slice指针可以在函数调用的时候修改容量和长度?</li><li>切片在进行append操作时如果发生扩容,会使得在堆上重新找一片内存空间给切片,也就是说array unsafe.Pointer这个指针会发生变化,可能会和第一点产生冲突,(问题来了,那么原来的内存会被释放吗)</li><li>扩容策略,小于1024的时候直接翻倍,再大了的话会根据元素内存大小,旧slice,新slice要求的容量共同决定.</li></ul><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>在函数中传递映射不是传递它的副本,事实上一旦修改则所有映射的拷贝都会察觉到(与切片同理,因为通过引用封装了底层数据结构)</p><p>等学习桶排序和桶的思路再补充…</p><h2 id="一些设计思路"><a href="#一些设计思路" class="headerlink" title="一些设计思路"></a>一些设计思路</h2><p>通过New方法来获得新的结构体类型</p>]]></content>
    
    
    <categories>
      
      <category>backend</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次配置服务器的经历（2）</title>
    <link href="/2021/02/16/%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%882%EF%BC%89/"/>
    <url>/2021/02/16/%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这次的服务器配置主要是为了在域名备案成功前进一步部署业务，包括脚本启动容器化等等更加细致的操作。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun#脚本一键安装sudo docker run hello-world#检验是否安装成功</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次配置服务器的经历</title>
    <link href="/2021/02/13/%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <url>/2021/02/13/%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一次配置服务器的经历"><a href="#一次配置服务器的经历" class="headerlink" title="一次配置服务器的经历"></a>一次配置服务器的经历</h1><p>在阿里云白嫖了一台学习机以后，部署自己的后端项目上面踩了很多坑，特此记录一下这个过程中学到的东西。</p><p>服务器的系统是ubuntu20.04，也算我比较熟悉的系统。</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>不得不说安装MySQL实在是一个大坑，弄不好就容易直接重来，网络上面的文档质量参差不齐，而且版本经常太低导致折腾了很久，最后的解决方案是</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get update #阿里云的服务器已经默认软件源为阿里云的镜像sudo apt-get install mysql-server#安装MySQlsystemctl status mysqld.service#检查MySQL的启动状态mysql -u root -p#使用密码和root账户登录mysql，第一次使用直接回车就行ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;NewPassWord&#39;;#在进入MySQL以后可以通过这个命令来修改初始密码</code></pre></div><p>在检验密码的时候既要输入正确密码检验是否正确，也要故意输入一个错的判断是否会拒绝，才能检验是否正确安装MySQL并且正确修改密码。否则有可能导致虽然可以正常使用MySQL但是后端服务连接的时候会报错。</p><h2 id="关于防火墙"><a href="#关于防火墙" class="headerlink" title="关于防火墙"></a>关于防火墙</h2><p>要想打开自己服务器的8080端口被访问需要一下几个步骤</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --zone&#x3D;public --list-ports#查看防火墙打开的端口firewall-cmd --zone&#x3D;public --query-port&#x3D;8080&#x2F;tcp#如果8080端口之前已经打开则会返回yes，否则返回nofirewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent#--permanent永久生效，没有此参数重启后失效#防火墙开放8080端口，注意要加tcpfirewall-cmd --zone&#x3D;public --remove-port&#x3D;8080&#x2F;tcp --permanent#关闭8080端口firewall-cmd --reload#必须要重新载入后才生效</code></pre></div><p><strong>最重要的是在以上操作后还是不够的（因为这个愚蠢的问题折腾了好几天），因为是在阿里云上面租的服务器，所以还要去阿里云上面设置安全组，才能完全开放8080端口。</strong></p><p>http的请求默认发到80/tcp端口，https的请求默认发到443/tcp端口。</p><h2 id="安装golang环境"><a href="#安装golang环境" class="headerlink" title="安装golang环境"></a>安装golang环境</h2><p>这里采用wget的方法获得最新版本的golang，因为不知道什么原因apt-get的版本只有1.3（如果已经通过apt安装了可以先remove掉再重新安装），甚至没有go mod，迫不得已去官网下载最新的版本。</p><p>卸载旧版本可以通过go env查看GOROOT的位置然后删除其文件夹即可。</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -c https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.15.8.linux-amd64.tar.gz -O - | sudo tar -xz -C &#x2F;usr&#x2F;local#注意这里的版本号要改成最新的#解压的目录可以改成&#x2F;usr&#x2F;bin，如果这样子对应的环境变量也要改echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&quot; &gt;&gt; ~&#x2F;.profileecho &quot;export GO111MODULE&#x3D;on&quot; &gt;&gt; ~&#x2F;.profileecho &quot;export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn&quot; &gt;&gt; ~&#x2F;.profile#这里也可以改成阿里云的镜像#通过echo &quot;&quot; &gt;&gt;~&#x2F; .profile的方法可以把环境变量永久写入配置文件中，每次打开终端都生效source ~&#x2F;.profile#加载环境变量go version#检查是否安装成功go env#查看所有go环境变量#可以go get试试速度看镜像有没有设置成功</code></pre></div><h2 id="其它golang镜像"><a href="#其它golang镜像" class="headerlink" title="其它golang镜像"></a>其它golang镜像</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#阿里云： https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;goproxy #微软： https:&#x2F;&#x2F;goproxy.io #七牛云： https:&#x2F;&#x2F;goproxy.cn #GoCenter： https:&#x2F;&#x2F;gocenter.io</code></pre></div><h2 id="配置nginx解决反向代理和跨域"><a href="#配置nginx解决反向代理和跨域" class="headerlink" title="配置nginx解决反向代理和跨域"></a>配置nginx解决反向代理和跨域</h2><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><p><strong>以下内容搬运了部分他人的博客。</strong></p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install nginx#Ubuntu下安装sudo apt-get updatesudo apt-get upgradesudo &#x2F;etc&#x2F;init.d&#x2F;nginx start#启动lsof -i:80#查看80端口使用情况，nginx默认监听80端口，即http的端口&#x2F;usr&#x2F;sbin&#x2F;nginx -t -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf#检查配置文件是否正确#如果正确会出现ok和successful等内容</code></pre></div><p><strong>然后记得防火墙打开80端口，服务器安全组设置80端口。</strong></p><p>再通过ip地址访问就可以看见nginx的界面了。</p><h3 id="nginx文件结构"><a href="#nginx文件结构" class="headerlink" title="nginx文件结构"></a>nginx文件结构</h3><ul><li>nginx的基本配置文件在/etc/nginx/nginx.conf</li><li>要添加某一服务应该去/etc/nginx/conf.d/xxxxx.conf添加，新加的xxxxx.conf会被引用进nginx.conf的http项里面</li><li>日志文件在/var/log/nginx/里面，可以通过修改nginx.conf里面的配置自定义日志输出</li><li>nginx的启动目录在/etc/init.d/nginx，而且似乎只有启动的时候要用到</li><li>不同系统的文件结构不一样，但是都在nginx.conf有记录</li></ul><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#这里是我的日志配置### Logging Settings##log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;                       &#39;$upstream_addr&#39;;#注意这里的$upstream_addr，这里可以在日志中输出反向代理后请求的去向access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main;#这里的main引用了上面定义的mainerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log debug;#错误日志等级调成debug</code></pre></div><p>这里是一条access.log中一条成功转发的日志</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xxx.xxx.xxx.xx - - [15&#x2F;Feb&#x2F;2021:11:36:53 +0800] &quot;GET &#x2F;api&#x2F;auth&#x2F;hello HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;PostmanRuntime&#x2F;7.26.8&quot; &quot;-&quot;127.0.0.1:8080</code></pre></div><p>可以看见请求从私网ip经过nginx转发到了服务器上的127.0.0.1:8080上。</p><h3 id="将请求转到8080端口"><a href="#将请求转到8080端口" class="headerlink" title="将请求转到8080端口"></a>将请求转到8080端口</h3><p>nginx的<a href="http://nginx.org/en/docs/beginners_guide.html">官方文档</a></p><p>先上配置文件default.conf（放在/etc/nginx/conf.d/里面）</p><p>这个名字可以随便定，以conf为后缀就行。</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server &#123;        listen  80;        server_name 公网ip地址;#一定要有        location &#x2F; &#123;           proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080; #注意这里如果最后没有&#x2F;则表示相对路径 #如果加了&#x2F;，则表示绝对根路径 #而且在转发的时候可以加入原始请求的请求头，这里应该参考官方文档        &#125;&#125;</code></pre></div><p>这个配置的问题解决参考了一篇<a href="https://zhuanlan.zhihu.com/p/108740468">知乎上的文章</a></p><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><p>配置https需要配置ssl证书和绑定域名等等操作，比较麻烦，日后再补。</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>跨域检验代码</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">var xhr &#x3D; new XMLHttpRequest();xhr.open(&#39;GET&#39;, &#39;https:&#x2F;&#x2F;www.xxx.com&#x2F;api&#x2F;action&#39;);xhr.send(null);xhr.onload &#x3D; function(e) &#123;    var xhr &#x3D; e.target;    console.log(xhr.responseText);&#125;</code></pre></div><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><p>在整个配置过程中必然少不了失败重装失败重装，所以掌握干净的卸载方法也很重要。</p><p>这里以卸载nginx举例子</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get --purge remove nginx#卸载nginx --purge代表包括配置文件sudo apt-get autoremove#自动卸载不用的软件dpkg --get-selection|grep nginx#列出和nginx相关的软件ps -ef |grep nginx#查看nginx进程kill -9 pid#杀死对应进程sudo find &#x2F; -name nginx*#查找所有nginx相关文件sudo rm -rf file#彻底删除</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Internat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网基础知识（2）</title>
    <link href="/2021/02/03/%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89/"/>
    <url>/2021/02/03/%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="互联网基础知识（2）"><a href="#互联网基础知识（2）" class="headerlink" title="互联网基础知识（2）"></a>互联网基础知识（2）</h1><h2 id="动态DNS"><a href="#动态DNS" class="headerlink" title="动态DNS"></a>动态DNS</h2><p><strong>动态DNS（DDNS）</strong>是一种在DNS服务中自动更新名称服务器内容的技术，根据互联网域名订立的协定，域名必须跟随固定的ip地址。但是动态DNS为动态网域提供一个固定的<strong>名称服务器</strong>，透过及时<strong>更新</strong>，使得外界用户可以连上动态用户的网址。DDNS将互联网域名指向了一个可能经常改变的ip地址，实现动态DNS需要将网域的最大缓存时间设定到一个非常短的时间，从而避免用户在缓存中保存了一个旧的up地址，并且每个新连接创建的时候都重新获得更新ip地址。提供DDNS服务的机构会通过<strong>数据库</strong>来保存用户的ip地址信息并动态更新。</p><h2 id="HTTP协议和HTTPS协议"><a href="#HTTP协议和HTTPS协议" class="headerlink" title="HTTP协议和HTTPS协议"></a>HTTP协议和HTTPS协议</h2><p>超文本传输协议（http）是数据通信的基础，最初的目的是提供一种发布和接受html页面的方法，通过http和https请求的资源都通过URL进行定位。</p><p>http的响应头里面有Set-Cookie这一项。</p><p>而https的主要作用就是在http的基础上建立一个安全信道，要求浏览器可以正确实现https并且操作系统中安装了正确的可信的证书颁发机构（大部分浏览器会对未持有有效证书的域名提出警告）。</p><p>http在传输的过程中对信息进行了加密处理，但是因为这个导致加载页面的时间会被拖慢，服务器资源消耗增加。</p><p>都应该尽量使用https而非http。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>cookie（又称小甜饼）是一种小型文本文件，由于http协议进行信息传递是无状态的，因此需要cookie来记录用户信息，在http的响应头里面会有Set-Cookie这一项，在设置cookie的时候可以设置cookie的名称、值、过期时间、域名、服务器路径、是否强制使用https等等。</p><p>内存cookie由浏览器进行管理和维护。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>内容比较多，需要单独整理</p><h2 id="WEB托管"><a href="#WEB托管" class="headerlink" title="WEB托管"></a>WEB托管</h2><p>web托管是一种提供互联网基础设施的服务，网站托管定期收取费用，提供域名、网站存储业务、可以被浏览器访问的服务器。</p><p>一般分为4类：</p><ul><li><p><strong>共享虚拟主机（vps)</strong></p><p>共享托管意味着多个业务运行在一个服务器或者硬件上面，一个服务器的资源拆分了以后再进行出租。</p></li><li><p><strong>专用服务器</strong></p><p>即一个服务器对应一个业务。</p></li><li><p><strong>云主机</strong></p><p>在一组集群服务器虚拟出多个独立服务器，每个服务器都有云服务器的一个镜像，提高稳定性。</p></li><li><p><strong>网站托管</strong></p><p>网站服务器是专门为网站页面设计和优化的，适用于网站搭建。</p></li></ul><p>托管的业务和物理服务器数量对应关系：</p><p>vps：一对多</p><p>专用服务器：一对一</p><p>云主机：多对一</p>]]></content>
    
    
    <categories>
      
      <category>backend</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Internat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网基础知识（1）</title>
    <link href="/2021/02/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/"/>
    <url>/2021/02/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="互联网基础知识（1）"><a href="#互联网基础知识（1）" class="headerlink" title="互联网基础知识（1）"></a>互联网基础知识（1）</h1><p>本文是按照<a href="https://roadmap.sh/backend">roadmap</a>来进行自己的后端学习的规划的第一步，梳理和学习基础的互联网知识</p><h2 id="互联网是如何工作的"><a href="#互联网是如何工作的" class="headerlink" title="互联网是如何工作的"></a>互联网是如何工作的</h2><p>这里主要是参考<a href="https://developer.mozilla.org/zh-CN/docs/learn/How_the_Internet_works">MDN</a>写下自己的一点理解</p><ul><li><p>两台电脑进行通信需要进行连接，这个过程包括有线连接和无线连接，有线方式比如网线，无线方式比如蓝牙和wifi。</p></li><li><p>当电脑数量多了以后需要的网线就成指数级别增长，就可以通过<strong>路由</strong>来对信息进行同意地接收和发送。</p></li><li><p>路由器和路由器之间可以连接，形成更加大的网络。</p></li><li><p>由此带来新的问题，不是所有地方都有网线覆盖，于是需要调制<strong>解调器（<em>modem</em>）</strong>来将网络信号转换为电话设施可以处理的信息。</p></li><li><p><strong>互联网服务提供商（ISP）</strong>是可以管理特殊的路由器的公司，他们同时可以和别的ISP进行连接，分发管理信息 。</p></li></ul><p>互联网发展是一个迭代的过程：</p><p>电脑间直接连接-&gt;路由器管理信息-&gt;通过modem把信息转换为更加容易传播的电话信号-&gt;通过ISP对路由器进行管理</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>ip地址是互联网协议中标识发送和接受数据的设备的一串数字，又译<strong>网络协议地址</strong>。</p><p>ip地址的主要功能：</p><ul><li><strong>标识主机</strong>：标识主机的网络接口，提供它在网络中的位置。</li><li><strong>网络寻址</strong>：该功能的目的是将数据报从一个网络模块发送到目的地，这个过程中ip地址意味着主机位置，域名意味着我们要找什么，路由意味着我们要如何到达目的地</li></ul><p>ipv4和ipv6是ip地址的两种协议，目前ipv4已经用尽。</p><p>ip地址的分配有两种方式，一种是根据主机的硬件和软件设施<strong>永久</strong>分配给主机的，被称为<strong>静态ip地址</strong>，一种是在主机每次加入网络时动态分配的，称为<strong>动态ip地址</strong>。</p><h2 id="内网ip和公网ip"><a href="#内网ip和公网ip" class="headerlink" title="内网ip和公网ip"></a>内网ip和公网ip</h2><p>内外网是相当于防火墙而言的，一般来说防火墙内的称为内网，防火墙外的称为外网。</p><p>公网地址是指在因特网上面可以被直接访问到的地址，一旦你有了一个公网ip，意味着你不但能够访问别人，也能被别人访问到（自己的电脑假如可以被随随便便访问到那当然非常恐怖）。因此，公网地址是各类服务器必不可少的条件。</p><p>有些ip地址段在设计之初就被预留出来，这些ip地址称为私有ip地址，任何内网中的设备都可以使用这些私有ip地址，但是却不能出现在外网上。<strong>内网地址只能在局域网中使用，不同局域网中可以使用相同的ip地址</strong>，内网内的主机想要访问外网，就必须通过<strong>NAT转换</strong>。</p><h2 id="NAT转换"><a href="#NAT转换" class="headerlink" title="NAT转换"></a>NAT转换</h2><p>内网内的主机想要访问外网，就必须通过NAT转换，将内网ip映射到<strong>公网ip的不同端口</strong>上面，这意味着一个公网ip可以对应多个内网ip，</p><p>区分内网公网的原因有两个，一个是为了安全（防止内网设备被公网访问），一个是为了应对ipv4的ip的不足，一般来说家庭内网的ip通常是以192.168.1开头，这足以应对大部分家庭网络需求。这也解释了为什么家庭用的主机一般是动态ip。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>如果想给一个电脑发送信息（也可以理解成给服务器发送信息，服务器本身也是台电脑），就必须有唯一识别的方式，就是我们常说的ip地址，当然ip地址是点分十进制的形式表现出来的，记忆不方便，于是就有了和其一一对应的域名。</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p><strong>域名系统（DNS）</strong>是一项互联网服务，是一个将域名和ip地址一一对应起来的分布式数据库，一般使用迭代查询的方法，把查询任务不断下放给下一个查询服务器直到返回结果（即ip地址），这个过程被称作<strong>域名解析</strong>，一个域名的所有者可以通过<strong>WHOIS数据库</strong>进行查询，DNS只能将静态的ip地址和域名绑定。</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>下一篇完成内容</p><ul><li>动态DNS</li><li>托管</li><li>浏览器</li><li>HTTP</li></ul>]]></content>
    
    
    <categories>
      
      <category>backend</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Internat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/01/hello-world/"/>
    <url>/2021/02/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>在多次努力和尝试以后终于搭好了自己的第一个博客，希望可以每日记录自己的所思所得，做个不咕咕的人。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
